#!/bin/bash

echo "Do not trust it ;-)" >&2
echo "Use instead: alias copy='low rsync -aHXz --numeric-ids --info=progress2 --no-inc-recursive'" >&2
exit 1

# cpv:      A file and directory copy tool with status indicators (thx to pipe viewer)
# Version:  0.2
# Build:    01-Mar-2018
# Author:   Heiko Barth
# Licence:  Beer-Ware (See: http://en.wikipedia.org/wiki/Beerware)

for i in "$@"; do
	shift
	[ "$i" == "-f" ] && FORCE=true && continue
	[ "$i" == "-v" ] && VERBOSE=true && continue
	set -- "$@" "$i"
done

if [ $# -lt 2 ]; then
	APP=${0##*/}
	VER=0.2
	echo "$APP $VER">&2
	echo >&2
	echo "Syntax: $APP <source file/directory> <destination file/directory>" >&2
	echo "        $APP <source file/directory> [<more source files/directorys>] <destination directory>" >&2
	echo >&2
	echo "Options: -f  Force overwriting files" >&2
	echo "         -v  Be verbose" >&2
	echo >&2
	exit 1
fi

trap exit INT EXIT
trap "echo -e '\nSIGTERM received.' >&2; exit" TERM

# colors
hash tput 2>/dev/null && {
	RED=$(tput setaf 1)
	GREEN=$(tput setaf 2)
	YELLOW=$(tput setaf 3)
	RESET=$(tput sgr0)
}

echoError() {
	echo -e "$RED$1$RESET\n" >&2
	exit 1
}

checkBinarys() {
	for i in "$@"; do
		hash $i 2>/dev/null || {
	       		echo "Binary missing: $i" >&2
			echo >&2
			exit 1
		}
	done
}
checkBinarys "pv" "chown" "chmod" "find" "mkdir" "du" "tar" "bc"

# pipe viewer options
PV=tbper

syncPermissions() {
	# sync only if root
	[ "$(id -u)" != "0" ] && return
	chmod --reference="$1" "$2" &&
	chown --reference="$1" "$2" || {
		echoError "Error: chmod/chown failed."
	}
}

# https://gist.github.com/agunnerson-ibm/efca449565a3e7356906/c3bde6edccada9521febe8b5f2e650514e3bb1c2
humanReadable() {
	local abbrevs=(
		$((1 << 60)):ZB
		$((1 << 50)):EB
		$((1 << 40)):TB
		$((1 << 30)):GB
		$((1 << 20)):MB
		$((1 << 10)):KB
		$((1)):bytes
	)

	local bytes="${1}"
	local precision="${2}"

	if [[ "${bytes}" == "1" ]]; then
		echo "1 byte"
	else
		for item in "${abbrevs[@]}"; do
			local factor="${item%:*}"
			local abbrev="${item#*:}"
			if [[ "${bytes}" -ge "${factor}" ]]; then
				local size="$(bc -l <<< "${bytes} / ${factor}")"
				printf "%.*f %s\n" "${precision}" "${size}" "${abbrev}"
				break
			fi
		done
	fi
}

isFile() {
	# existing and readable?
	[ -r "$1" ] &&
	# not directory
	[ ! -d "$1" ] &&
	# not socket
	[ ! -S "$1" ] &&
	# not a special file --> /dev/random
	# [ ! -c "$1" ] &&
	# not FIFO
	[ ! -p "$1" ] &&
	return 0

#echo check	
#	[ -h "$1" ] && return 0

	return 1
}

if [ $# -eq 2 ]; then
	# basic error checking
	[ ! -e "$1" ] && [ ! -h "$1" ] && echoError "Error: '$1' does not exist."
	[ -e "$2" ] && [ ! -w "$2" ] && echoError "Error: '$2' already exist but is not writeable."
	
	# file to dir
	# if [ ! -d "$1" ] && [ -r "$1" ] && [ -d "$2" ]; then
	if isFile "$1" && [ -d "$2" ]; then
		BASE=${1##*/}
		DST=$(readlink -f "$2"/"$BASE")
		if [ "$(readlink -f "$1")" == "$DST" ]; then
			echoError "Error: Source and destination file is the same."
		elif [ ! $FORCE ] && [ -f "$DST" ]; then
			echo "File '$DST' already exists." >&2
			read -p 'Do you want to overwrite? [y/N] ' input
			[ "$input" != "y" ] && exit 1
		fi
		SIZEH=$(humanReadable $(stat -c%s "$1") 0)
		[ -z "$SIZEH" ] && SIZEH=$(stat -c%F "$1")
		echo "${YELLOW}File: $RESET$1 [$SIZEH] $YELLOW-->$RESET $DST" # readlink removes double slash
		pv -$PV "$1" > "$DST" &&
		syncPermissions "$1" "$DST" &&
		echo "${GREEN}OK$RESET" || echo "${RED}ERROR$RESET"
		exit
	# file to file
	# elif [ ! -d "$1" ] && [ -r "$1" ]; then
	elif isFile "$1" ; then
		DST=$(readlink -f "$2")
		if [ "$(readlink -f "$1")" == "$DST" ]; then
			echoError "Error: Source and destination file is the same."
		elif [ ! $FORCE ] && [ -f "$2" ]; then
			echo "File '$2' already exists." >&2
			read -p 'Do you want to overwrite? [y/N] ' input
			[ "$input" != "y" ] && exit 1
		fi
		touch "$2" || echoError "Error: Destination file '$2' could not be created."
		SIZEH=$(humanReadable $(stat -c%s "$1") 0)
		[ -z "$SIZEH" ] && SIZEH=$(stat -c%F "$1")
		echo "${YELLOW}File: $RESET$1 [$SIZEH] $YELLOW-->$RESET $DST"
		pv -$PV "$1" > "$DST" &&
		syncPermissions "$1" "$DST" &&
		echo "${GREEN}OK$RESET" || echo "${RED}ERROR$RESET"
		exit
	# symlink 
	elif [ -h "$1" ]; then
		echo "${YELLOW}Copy Symlink: $RESET$1 $YELLOW-->$RESET $2"
		cp -a "$1" "$2" && # 2do: check if dst symlink already exist
		echo "${GREEN}OK$RESET" || echo "${RED}ERROR$RESET"
		exit
	fi
fi

DST=${@: -1} # last argument (directory)
DST=$(readlink -f "$DST")

if [ -e "$DST" ] && [ ! -d "$DST" ]; then
	echoError "Error: Target '$DST' is not a directory and already exist. Please remove first."
elif [ ! -d "$DST" ]; then
	[ $VERBOSE ] && echo "${YELLOW}Creating directory: $RESET$DST"
	mkdir -p "$DST" 2> /dev/null && CREATED=1 || echoError "Error: Could not create directory '$DST'."
else
	[ ! -w "$DST" ] && echoError "Error: Destination directory '$DST' is not writeable."
	if [ ! $FORCE ]; then
		echo "Destination directory '$DST' already exist." >&2
		read -p 'Files/Directorys in '$DST' will be overwritten! Continue? [y/N] ' input
		[ "$input" != "y" ] && exit 1
	fi
fi

for i in "$@"; do
	[ ! -e "$i" ] && [ ! -h "$i" ] && echoError "Error: '$i' does not exist."
done

for i in "$@"; do
	((j++))
	[ $# == $j ] && break
	
	BASE=$(basename "$i") # ${i##*/} not suitable for directorys
	#BASEi=$(readlink -f "$BASE")
	
	if [ ! $FORCE ]; then
		if [ -e "$DST"/"$BASE" ]; then # !!!!!!!!!!!!!!!!!!!!!! doppelslah entfernen
			read -p  "$DST/$BASE already exist! Override? [y/N] " input
			[ "$input" != "y" ] && continue
		fi
	fi

	if isFile "$i"; then
		# file to file
		touch "$DST"/"$BASE" || echoError "Error: Destination file '$2' could not be created."
		SIZEH=$(humanReadable $(stat -c%s "$i") 0)
		[ -z "$SIZEH" ] && SIZEH=$(stat -c%F "$i")
		echo "${YELLOW}File: $RESET$i [$SIZEH] $YELLOW-->$RESET $DST/$BASE" # readlink removes double slash
		pv -$PV "$i" > "$DST"/"$BASE" &&
		syncPermissions "$i" "$DST"/"$BASE" && echo "${GREEN}OK$RESET" || echo "${RED}ERROR$RESET"
	elif [ -d "$i" ]; then
echo "${YELLOW}Calculating estimate size..$RESET"
		SIZE=$(du -sb "$i" | grep -oP '^[0-9]+')
		SIZEH=$(humanReadable $SIZE 0)
		[ $VERBOSE ] && TAR=cvC || TAR=cC
		if [ $# -eq 2 ] && [ "$CREATED" == "1" ]; then
			# dir to 1 dir
echo "1:1"
			echo "$DST/$BASE"
			echo "${YELLOW}Directory:$RESET $i [$SIZEH] $YELLOW-->$RESET $DST" # readlink removes double slash
			tar $TAR "$i" . | pv -${PV}s $SIZE | tar xC "$DST" && echo "${GREEN}OK$RESET" || echo "${RED}ERROR$RESET"
		else
echo "DST $DST"
			
			# dir to dir
			#echo "${YELLOW}Directory:$RESET $i [$SIZEH] $YELLOW-->$RESET $(readlink -f "$DST"/$(basename "$i"))" # readlink removes double slash
			echo "${YELLOW}Directory:$RESET $i [$SIZEH] $YELLOW-->$RESET $DST/$BASE" # readlink removes double slash
echo tar $TAR "$(dirname "$i")" $BASE
			tar $TAR "$(dirname "$i")" $BASE | pv -${PV}s $SIZE | tar xC "$DST" && echo "${GREEN}OK$RESET" || echo "${RED}ERROR$RESET"
		fi
	# symlink 
	elif [ -h "$i" ]; then
		echo "${YELLOW}Copy symlink: $RESET$i $YELLOW-->$RESET $DST"
		cp -a "$i" "$DST" && # 2do: check if dst symlink already exist
		echo "${GREEN}OK$RESET" || echo "${RED}ERROR$RESET"
	else
		echo >&2
		echo "${RED}Error: '$i' is not a file or directory.$RESET" >&2
		echo "${RED}Type: $(stat -c%F "$i")$RESET" >&2
		echo >&2
		echo "${YELLOW}What did you try to do? Please report :) THX$RESET" >&2
		exit 1
	fi
	echo
done
