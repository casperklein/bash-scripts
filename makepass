#!/bin/bash

# makepass:  Generates a password of custom length
# Requires:  'head' binary from coreutils
# Version:   0.1
# Build:     20-Nov-2010
# Author:    Heiko Barth
# Licence:   Beer-Ware (See: http://en.wikipedia.org/wiki/Beerware)

# Character classes
CHARS=$CHARS'abcdefghijkmnpqrstuvwxyz'	# lower case; 'l' 'o' removed
CHARS=$CHARS'ABCDEFGHJKLMNPQRSTUVWXYZ'	# upper case; 'I' 'O' removed
CHARS=$CHARS'123456789'			# digits; 0 removed
CHARS=$CHARS'!$%#&(){}=?'		# some special chars

# Random Number Generator
RNG='/dev/random'

GREEN='\e[1;32m'  # Light Green
YELLOW='\e[1;33m' # Light Yellow
RST='\e[0m'

# Some input validation
if [[ $1 =~ ^[0-9]+$ ]] && [ $1 -gt 0 ]; then length=$1
	# Check if custom characters are given
	if [ $# -eq 2 ] && [ ${#2} -gt 0 ]; then
		shift
		CHARS=$@
		echo -e "${YELLOW}Using custom characters: $CHARS$RST"
	fi
	
	tput sc
	echo -n -e "${YELLOW}Progress: 0 of $length characters$RST"
	
	# Get random characters
	while [ 1 ]; do
		c=$(head -c 1 $RNG)
		if [[ $c =~ [$CHARS] ]]; then
			res=$res$c
			let i++
			tput el1; tput rc
			echo -n -e "${YELLOW}Progress: $i of $length characters$RST"
			if [ ${#res} -eq $length ]; then
				tput el1; tput rc
				echo -e "${GREEN}Password: $res\n$RST"
				exit
			fi
		fi
	done
else
	echo "Syntax: makepass <length> [<characters>]" >&2
	echo >&2
	exit 1
fi
