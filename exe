#!/bin/bash

# SETUP --------------------------------------------------------------

# Uncomment to enable command logging to file
#LOG="/tmp/$APP.history"

# --------------------------------------------------------------------

set -ueo pipefail

# whats my name?
APP=${0##*/}

# no tty? no colors!
tty -s && RED=$(tput setaf 1)		|| RED=
tty -s && GREEN=$(tput setaf 2)		|| GREEN=
tty -s && YELLOW=$(tput setaf 3)	|| YELLOW=
tty -s && RESET=$(tput sgr0)		|| RESET=       # reset fg/bg color
tty -s && DELETE='\r\033[K'		|| DELETE='\n'  # delete current line

_cleanUp() {
	[ -f "${SCRIPT:-}" ] && {
		rm "$SCRIPT"
	}
	exit
}

trap _cleanUp INT EXIT TERM

_exe() {
	# prepare script
	SCRIPT=$(mktemp "/tmp/$APP-XXX") || {
		echo "Error: Could not create temporary script file."
		echo
		exit 1
	} >&2
	chmod 700 "$SCRIPT" || {
		echo "Error: Could not change file mode bits."
		echo
		exit 1
	} >&2

	echo '#!/bin/bash' > "$SCRIPT"

	# build $CMD with quoted command and arguments
	# build script
	for i in "$@"; do
			# escape bash operators & build-ins
			if [[ "$i" =~ ^[0-9\<\>\|\&\*\;]+$|^time$ ]]; then
				CMD=$CMD" $i"
				echo -n " $i" >> "$SCRIPT"
			else
				# since we use ' ourself, we need to escape it when writing to script
				#i=$(echo "$i" | sed 's/'\''/'\''\\'\'\''/g') # use printf, to avoid problems with echo options in $i, e.g. -n
				i=$(printf "%s\n" "$i" | sed 's/'\''/'\''\\'\'\''/g')
				CMD=${CMD:-}' '\'"$i"\'
				echo -n " '$i'" >> "$SCRIPT"
			fi
	done
	CMD=${CMD# }

	# logging
	if [ -n "${LOG:-}" ]; then
		{
			echo -ne "$(date "+%F %T")\t"
			tail -1 "$SCRIPT"
			echo
		} >> "$LOG"
	fi

	# in progress
	echo -n "[ $YELLOW..$RESET ] $YELLOW>>$RESET $CMD"

	if RESULT=$($SCRIPT 2>&1); then
		# success; is there output?
		[ -n "$RESULT" ] && {
			# more than one line output?
			if [[ "$RESULT" == *$'\n'* ]]; then
				COUNT=$(( ${#CMD} + 14 ))
				SPACE=$(printf "%${COUNT}s")
				RESULT=$(echo -n "$RESULT" | sed "s/^/$SPACE/g")
				RESULT=${RESULT:$COUNT}
			fi
			RESULT=" $YELLOW>>$RESET $GREEN$RESULT$RESET"
		}
		echo -en $DELETE
		echo "[$GREEN OK $RESET] $YELLOW>>$RESET $CMD$RESULT"
		return 0
	else
		# errocode > 0
		CODE=$?
		# is there output?
		[ -n "$RESULT" ] && {
			# more than one line output?
			if [[ "$RESULT" == *$'\n'* ]]; then
				COUNT=$(( ${#CMD} + 17 ))
				SPACE=$(printf "%${COUNT}s")
				RESULT=$(echo -n "$RESULT" | sed "s/^/$SPACE/g")
				RESULT=${RESULT:$COUNT}
			else
				# cmd execution failed? not found, no permission etc. --> remove temporary file name and line number from $RESULT
				if grep -qP "^$SCRIPT?: line \d+:" <<< "$RESULT"; then
					RESULT=$(cut -d: -f3- <<< "$RESULT")
					RESULT=${RESULT:1}
				fi
			fi
			RESULT=" $YELLOW>>$RESET $RED$RESULT$RESET"
		}
		echo -en $DELETE
		echo "[$RED ERROR $RESET] $YELLOW>>$RESET $CMD$RESULT"
		return $CODE
	fi
}

_line() {
	echo
	printf '%.0s-' $(seq 1 ${COLUMNS:-80})
	echo
	echo
}

if [ $# -gt 0 ]; then
	_exe "$@"
	exit $?
else
	{
		echo "Executes a command and show result/output in a nice way. Original return code is preserved."
		echo
		echo "Usage: $APP <command> <arguments>"
		_line

		echo "Example: $YELLOW$APP echo 'hello world'$RESET"
		echo
		DEMO=$("$APP" echo 'hello world')
		ERROR=$?
		echo "Result:"
		echo
		echo "$DEMO"
		echo "Return code: $GREEN$ERROR$RESET"
		_line

		echo "Example with error: $YELLOW$APP false 'hello world'$RESET"
		echo
		set +e
		DEMO=$("$APP" false 'hello world')
		ERROR=$?
		set -e
		echo "Result:"
		echo
		echo "$DEMO"
		echo "Return code: $RED$ERROR$RESET"
		_line

		echo "Example with escaped pipe: $YELLOW$APP echo foo '|' cat$RESET"
		echo
		DEMO=$("$APP" echo foo '|' cat)
		ERROR=$?
		echo "Result:"
		echo
		echo "$DEMO"
		echo "Return code: $GREEN$ERROR$RESET"
		echo
		exit 1
	} >&2
fi
